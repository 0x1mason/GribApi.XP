
--- src/action.c	Thu Jul  2 11:32:08 2015
+++ src/action.c	Sun Nov 15 14:04:27 2015
@@ -27,12 +27,27 @@ static void init_mutex() {
     pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex1;
+
+static void init_mutex()
+{
+    GRIB_OMP_CRITICAL(lock_action_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex1);
+            once = 1;
+        }
+    }
+}
 #endif
 
 
 static void init(grib_action_class *c)
 {
-    GRIB_PTHREAD_ONCE(&once,&init_mutex);
+    GRIB_MUTEX_INIT_ONCE(&once,&init_mutex);
     GRIB_MUTEX_LOCK(&mutex1);
     if(c && !c->inited)
     {
@@ -100,7 +115,7 @@ int grib_create_accessor(grib_section* p
     {
         if(c->create_accessor) {
 			int ret;
-			GRIB_PTHREAD_ONCE(&once,&init_mutex);
+			GRIB_MUTEX_INIT_ONCE(&once,&init_mutex);
 			GRIB_MUTEX_LOCK(&mutex1);
             ret=c->create_accessor(p, a, h);
 			GRIB_MUTEX_UNLOCK(&mutex1);
@@ -117,7 +132,7 @@ int grib_action_notify_change( grib_acti
 {
     grib_action_class *c = a->cclass;
 
-    GRIB_PTHREAD_ONCE(&once,&init_mutex)
+    GRIB_MUTEX_INIT_ONCE(&once,&init_mutex)
     GRIB_MUTEX_LOCK(&mutex1)
 
     init(c);
--- src/action_class_concept.c	Thu Jul  2 11:32:08 2015
+++ src/action_class_concept.c	Sun Nov 15 14:04:27 2015
@@ -105,6 +105,21 @@ static void init() {
     pthread_mutex_init(&mutex,&attr);
     pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_action_class_concept_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 
 static grib_concept_value* get_concept(grib_handle* h,grib_action_concept* self);
@@ -272,7 +287,7 @@ static grib_concept_value* get_concept_i
 static grib_concept_value* get_concept(grib_handle* h, grib_action_concept* self)
 {
     grib_concept_value* result = NULL;
-    GRIB_PTHREAD_ONCE(&once,&init)
+    GRIB_MUTEX_INIT_ONCE(&once,&init)
     GRIB_MUTEX_LOCK(&mutex);
 
     result = get_concept_impl(h, self);
--- src/grib_accessor_class.c	Thu Jul  2 11:32:08 2015
+++ src/grib_accessor_class.c	Sun Nov 15 14:04:27 2015
@@ -28,6 +28,21 @@ static void init() {
     pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex1;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_accessor_class_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex1);
+            once = 1;
+        }
+    }
+}
 #endif
 
 struct table_entry
@@ -55,7 +70,7 @@ grib_section*  grib_create_root_section(
     char* fpath=0;
     grib_section*   s   = (grib_section*) grib_context_malloc_clear(context,sizeof(grib_section));
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex1);
     if(h->context->grib_reader == NULL) {
         if ((fpath=grib_context_full_defs_path(h->context,"boot.def"))==NULL) {
--- src/grib_api_internal.h	Thu Jul  2 11:32:08 2015
+++ src/grib_api_internal.h	Sun Nov 15 14:04:27 2015
@@ -121,15 +123,27 @@ extern "C" {
 
 #if GRIB_PTHREADS
  #include <pthread.h>
- #define GRIB_PTHREAD_ONCE(a,b) pthread_once(a,b);
+ #define GRIB_MUTEX_INIT_ONCE(a,b) pthread_once(a,b);
  #define GRIB_MUTEX_LOCK(a) pthread_mutex_lock(a); 
  #define GRIB_MUTEX_UNLOCK(a) pthread_mutex_unlock(a);
 /*
 #define GRIB_MUTEX_LOCK(a) {pthread_mutex_lock(a); printf("MUTEX LOCK %p %s line %d\n",(void*)a,__FILE__,__LINE__);}
 #define GRIB_MUTEX_UNLOCK(a) {pthread_mutex_unlock(a);printf("MUTEX UNLOCK %p %s line %d\n",(void*)a,__FILE__,__LINE__);} 
 */
+#elif GRIB_OMP_THREADS
+ #include <omp.h>
+ #ifdef _MSC_VER
+  #define GRIB_OMP_CRITICAL(a) __pragma(omp critical (a))
+ #else
+  #define GRIB_OMP_STR(a) #a
+  #define GRIB_OMP_XSTR(a) GRIB_OMP_STR(a)
+  #define GRIB_OMP_CRITICAL(a) _Pragma( GRIB_OMP_XSTR(omp critical (a) ) )
+ #endif
+ #define GRIB_MUTEX_INIT_ONCE(a,b) (*b)();
+ #define GRIB_MUTEX_LOCK(a)  omp_set_nest_lock(a); 
+ #define GRIB_MUTEX_UNLOCK(a)  omp_unset_nest_lock(a);
 #else
- #define GRIB_PTHREAD_ONCE(a,b)
+ #define GRIB_MUTEX_INIT_ONCE(a,b)
  #define GRIB_MUTEX_LOCK(a)
  #define GRIB_MUTEX_UNLOCK(a)
 #endif
@@ -877,6 +891,8 @@ struct grib_context
 	grib_trie*                      classes;
 #if GRIB_PTHREADS
     pthread_mutex_t                 mutex;
+#elif GRIB_OMP_THREADS
+    omp_nest_lock_t                 mutex;
 #endif
 
 };
--- src/grib_context.c	Thu Jul  2 11:32:08 2015
+++ src/grib_context.c	Sun Nov 15 14:04:27 2015
@@ -40,7 +40,23 @@ static void init()
     pthread_mutex_init(&mutex_mem,&attr);
     pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex_mem;
+static omp_nest_lock_t mutex_c;
 
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_context_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex_mem);
+            omp_init_nest_lock(&mutex_c);
+            once = 1;
+        }
+    }
+}
 #endif
 
 
@@ -52,7 +68,7 @@ static long cntp = 0;
 
 static void default_long_lasting_free(const grib_context* c, void* p)
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     free(p);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cntp--;
@@ -62,7 +78,7 @@ static void default_long_lasting_free(co
 static void* default_long_lasting_malloc(const grib_context* c, size_t size)
 {
     void* ret;
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cntp++;
     GRIB_MUTEX_UNLOCK(&mutex_mem);
@@ -72,7 +88,7 @@ static void* default_long_lasting_malloc
 
 static void default_buffer_free(const grib_context* c, void* p)
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     free(p);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cntp--;
@@ -82,7 +98,7 @@ static void default_buffer_free(const gr
 static void* default_buffer_malloc(const grib_context* c, size_t size)
 {
     void* ret;
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cntp++;
     GRIB_MUTEX_UNLOCK(&mutex_mem);
@@ -99,7 +115,7 @@ static void* default_buffer_realloc(cons
 
 static void default_free(const grib_context* c, void* p)
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     free(p);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cnt--;
@@ -109,7 +125,7 @@ static void default_free(const grib_cont
 static void* default_malloc(const grib_context* c, size_t size)
 {
     void* ret;
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_mem);
     cnt++;
     GRIB_MUTEX_UNLOCK(&mutex_mem);
@@ -323,7 +339,7 @@ static grib_context default_grib_context
 
 grib_context* grib_context_get_default()
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
 
 #ifdef ENABLE_FLOATING_POINT_EXCEPTIONS
     feenableexcept(FE_ALL_EXCEPT & ~FE_INEXACT);
@@ -455,7 +471,7 @@ grib_context* grib_context_new(grib_cont
 
     if (!parent) parent=grib_context_get_default();
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&(parent->mutex));
 
     c = (grib_context*)grib_context_malloc_clear_persistent(&default_grib_context,sizeof(grib_context));
@@ -532,7 +548,7 @@ static int init_definition_files_dir(gri
     /* Note: strtok modifies its first argument so we copy */
     strncpy(path, c->grib_definition_files_path, DEF_PATH_MAXLEN);
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_c);
 
     p=path;
@@ -574,7 +590,7 @@ char *grib_context_full_defs_path(grib_c
     grib_string_list* fullpath=0;
     if (!c) c=grib_context_get_default();
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
 
     if(*basename == '/' || *basename ==  '.') {
         return (char*)basename;
--- src/grib_filepool.c	Thu Jul  2 11:32:08 2015
+++ src/grib_filepool.c	Sun Nov 15 14:04:27 2015
@@ -29,6 +29,21 @@ static void init() {
     pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex1;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_filepool_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex1);
+            once = 1;
+        }
+    }
+}
 #endif
 
 static short next_id=0;
@@ -167,7 +182,7 @@ grib_file* grib_file_open(const char* fi
 	grib_file *file=0,*prev=0;
 	int same_mode=0;
 	int is_new=0;
-	GRIB_PTHREAD_ONCE(&once,&init);
+	GRIB_MUTEX_INIT_ONCE(&once,&init);
 
 	if (!file_pool.context) file_pool.context=grib_context_get_default();
 
@@ -247,7 +262,7 @@ void grib_file_close(const char* filenam
 	/* So only call fclose() when too many files are open */
 	if ( file_pool.number_of_opened_files > GRIB_MAX_OPENED_FILES ) {
 		/*printf("++ closing file %s\n",filename);*/
-		GRIB_PTHREAD_ONCE(&once,&init);
+		GRIB_MUTEX_INIT_ONCE(&once,&init);
 		GRIB_MUTEX_LOCK(&mutex1);
 		file=grib_get_file(filename,err);
 		if (file->handle) {
@@ -270,7 +285,7 @@ void grib_file_close_all(int *err)
 	grib_file* file = NULL;
 	if (!file_pool.first) return;
 
-	GRIB_PTHREAD_ONCE(&once,&init);
+	GRIB_MUTEX_INIT_ONCE(&once,&init);
 	GRIB_MUTEX_LOCK(&mutex1);
 
 	file = file_pool.first;
@@ -335,7 +350,7 @@ grib_file* grib_file_new(grib_context* c
 		*err=GRIB_OUT_OF_MEMORY;
 		return NULL;
 	}
-	GRIB_PTHREAD_ONCE(&once,&init);
+	GRIB_MUTEX_INIT_ONCE(&once,&init);
 
 	file->name=strdup(name);
 	file->id=next_id;
@@ -355,7 +370,7 @@ grib_file* grib_file_new(grib_context* c
 
 void grib_file_delete(grib_file* file)
 {
-	GRIB_PTHREAD_ONCE(&once,&init);
+	GRIB_MUTEX_INIT_ONCE(&once,&init);
 	GRIB_MUTEX_LOCK(&mutex1);
 	if (!file) return;
 	if(file->name) free(file->name);
--- src/grib_handle.c	Thu Jul  2 11:32:08 2015
+++ src/grib_handle.c	Sun Nov 15 14:04:27 2015
@@ -34,6 +34,23 @@ static void init() {
     pthread_mutexattr_destroy(&attr);
 
 }
+/* #elif GRIB_OMP_THREADS */
+static int once = 0;
+static omp_nest_lock_t mutex1;
+static omp_nest_lock_t mutex2;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_handle_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex1);
+            omp_init_nest_lock(&mutex2);
+            once = 1;
+        }
+    }
+}
 #endif
 
 
--- src/grib_hash_keys.c	Thu Jul  2 11:32:08 2015
+++ src/grib_hash_keys.c	Sun Nov 15 14:04:27 2015
@@ -5904,6 +5904,21 @@ static void init() {
   pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_hash_keys_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 struct grib_itrie {
   grib_itrie* next[SIZE];
@@ -5922,7 +5937,7 @@ grib_itrie *grib_hash_keys_new(grib_cont
 }
 
 void grib_hash_keys_delete(grib_itrie *t) {
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   if(t)  {
@@ -5952,7 +5967,7 @@ int grib_hash_keys_get_id(grib_itrie* t,
 
   /* printf("+++ \"%s\"\n",key); */
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   while(*k && t)  t = t->next[mapping[(int)*k++]];
@@ -5973,8 +5988,7 @@ int grib_hash_keys_insert(grib_itrie* t,
   grib_itrie *last = t;
   int* count;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
-
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   count=t->count;
--- src/grib_ibmfloat.c	Thu Jul  2 11:32:08 2015
+++ src/grib_ibmfloat.c	Sun Nov 15 14:04:27 2015
@@ -21,6 +21,21 @@ static void init() {
     pthread_mutex_init(&mutex,&attr);
     pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_ibmfloat_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 
 typedef struct ibm_table_t ibm_table_t;
@@ -56,7 +71,7 @@ static void init_ibm_table()
 
 static void init_table_if_needed()
 {
-    GRIB_PTHREAD_ONCE(&once,&init)
+    GRIB_MUTEX_INIT_ONCE(&once,&init)
     GRIB_MUTEX_LOCK(&mutex)
 
     if (!ibm_table.inited) init_ibm_table();
--- src/grib_ieeefloat.c	Thu Jul  2 11:32:08 2015
+++ src/grib_ieeefloat.c	Sun Nov 15 14:04:27 2015
@@ -25,6 +25,21 @@ static void init() {
     pthread_mutex_init(&mutex,&attr);
     pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_ieeefloat_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 
 #if 1
@@ -70,7 +85,7 @@ static void init_ieee_table()
 
 static void init_table_if_needed()
 {
-    GRIB_PTHREAD_ONCE(&once,&init)
+    GRIB_MUTEX_INIT_ONCE(&once,&init)
     GRIB_MUTEX_LOCK(&mutex)
 
     if (!ieee_table.inited) init_ieee_table();
--- src/grib_index.c	Thu Jul  2 11:32:08 2015
+++ src/grib_index.c	Sun Nov 15 14:04:27 2015
@@ -38,6 +38,23 @@ static void init() {
     pthread_mutexattr_destroy(&attr);
 
 }
+/* #elif GRIB_OMP_THREADS */
+static int once = 0;
+static omp_nest_lock_t mutex1;
+static omp_nest_lock_t mutex2;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_index_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex1);
+            omp_init_nest_lock(&mutex2);
+            once = 1;
+        }
+    }
+}
 #endif
 
 
--- src/grib_itrie.c	Thu Jul  2 11:32:08 2015
+++ src/grib_itrie.c	Sun Nov 15 14:04:27 2015
@@ -284,6 +284,21 @@ static void init() {
   pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_itrie_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 struct grib_itrie {
   grib_itrie* next[SIZE];
@@ -303,7 +318,7 @@ grib_itrie *grib_itrie_new(grib_context*
 }
 
 void grib_itrie_delete(grib_itrie *t) {
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   if(t)  {
@@ -324,7 +339,7 @@ int grib_itrie_get_id(grib_itrie* t,cons
   const char *k=key;
   grib_itrie* last=t;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   while(*k && t)  t = t->next[mapping[(int)*k++]];
@@ -345,7 +360,7 @@ int grib_itrie_insert(grib_itrie* t,cons
   grib_itrie *last = t;
   int* count;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
 
   GRIB_MUTEX_LOCK(&mutex)
 
--- src/grib_memory.c	Thu Jul  2 11:32:08 2015
+++ src/grib_memory.c	Sun Nov 15 14:04:27 2015
@@ -27,6 +27,21 @@ static void init() {
   pthread_mutexattr_destroy(&attr);
 
 }
+#elif GRIB_OMP_THREADS
+static int once  = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_memory_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 
 union align {
@@ -91,7 +106,7 @@ static void *fast_new(size_t s,mempool *
   char *p;
   memblk *m;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   m = (memblk*)pool->priv;
@@ -153,7 +168,7 @@ static void fast_delete(void *p,mempool 
   memblk *m ;
   memblk *n = NULL;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   m = (memblk*)pool->priv;
@@ -265,7 +280,7 @@ void *grib_buffer_malloc(const grib_cont
 {
   memblk *r;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   s = ((s+WORD-1)/WORD)*WORD;
@@ -304,7 +319,7 @@ void grib_buffer_free(const grib_context
   memblk *r;
   memblk *s;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   r = (memblk*)(((char*)p) - HEADER_SIZE);
--- src/grib_parse_utils.c	Thu Jul  2 11:32:08 2015
+++ src/grib_parse_utils.c	Sun Nov 15 14:04:27 2015
@@ -45,6 +45,29 @@ static void init()
     pthread_mutex_init(&mutex_parse,&attr);
     pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex_file;
+static omp_nest_lock_t mutex_rules;
+static omp_nest_lock_t mutex_concept;
+static omp_nest_lock_t mutex_stream;
+static omp_nest_lock_t mutex_parse;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_parse_utils_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex_file);
+            omp_init_nest_lock(&mutex_rules);
+            omp_init_nest_lock(&mutex_concept);
+            omp_init_nest_lock(&mutex_stream);
+            omp_init_nest_lock(&mutex_parse);
+            once = 1;
+        }
+    }
+}
 #endif
 
 int grib_recompose_name(grib_handle* h, grib_accessor *observer, const char* uname, char* fname,int fail)
@@ -485,7 +508,7 @@ extern int grib_yyparse(void);
 static int parse(grib_context* gc, const char* filename)
 {
     int err = 0;
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_parse);
 
 #ifdef YYDEBUG
@@ -518,7 +541,7 @@ static int parse(grib_context* gc, const
 
 static grib_action* grib_parse_stream(grib_context* gc, const char* filename)
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_stream);
 
     grib_parser_all_actions = 0;
@@ -540,7 +563,7 @@ static grib_action* grib_parse_stream(gr
 
 grib_concept_value* grib_parse_concept_file( grib_context* gc,const char* filename)
 {
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_concept);
 
     gc = gc ? gc : grib_context_get_default();
@@ -559,7 +582,7 @@ grib_rule* grib_parse_rules_file( grib_c
 {
     if (!gc) gc=grib_context_get_default();
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_rules);
 
     gc = gc ? gc : grib_context_get_default();
@@ -578,7 +601,7 @@ grib_action* grib_parse_file( grib_conte
 {
     grib_action_file* af;
 
-    GRIB_PTHREAD_ONCE(&once,&init);
+    GRIB_MUTEX_INIT_ONCE(&once,&init);
     GRIB_MUTEX_LOCK(&mutex_file);
 
     af =0;
--- src/grib_trie.c	Thu Jul  2 11:32:08 2015
+++ src/grib_trie.c	Sun Nov 15 14:04:27 2015
@@ -283,6 +283,21 @@ static void init() {
   pthread_mutex_init(&mutex,&attr);
   pthread_mutexattr_destroy(&attr);
 }
+#elif GRIB_OMP_THREADS
+static int once = 0;
+static omp_nest_lock_t mutex;
+
+static void init()
+{
+    GRIB_OMP_CRITICAL(lock_grib_trie_c)
+    {
+        if (once == 0)
+        {
+            omp_init_nest_lock(&mutex);
+            once = 1;
+        }
+    }
+}
 #endif
 
 struct grib_trie {
@@ -306,7 +321,7 @@ grib_trie *grib_trie_new(grib_context* c
 }
 
 void grib_trie_delete(grib_trie *t) {
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
   if(t)  {
     int i;
@@ -340,7 +355,7 @@ void* grib_trie_insert(grib_trie* t,cons
   const char *k = key;
   void* old = NULL;
 
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   while(*k && t) {
@@ -396,7 +411,7 @@ void* grib_trie_insert_no_replace(grib_t
 void *grib_trie_get(grib_trie* t,const char* key)
 {
   const char *k = key;
-  GRIB_PTHREAD_ONCE(&once,&init)
+  GRIB_MUTEX_INIT_ONCE(&once,&init)
   GRIB_MUTEX_LOCK(&mutex)
 
   while(*k && t)
